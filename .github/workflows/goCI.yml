name: CI setup for Go
on: #on event keyword
  push:
    branches: [main] #identifying branch
    
jobs: # Job to execute on event
  my-job: # identifier for the job, just a name
    name: My Job
    runs-on: ubuntu-18.04 # specify OS in virtual machine
    steps:
    - name: Print a greeting
      run: |
        ls
        echo Hello there! # run terminal command
        
    - name: Setup Go environment
      uses: actions/setup-go@v2.1.3
      with:
        # The Go version to download (if necessary) and use. Supports semver spec and ranges.
        go-version: 1.16.5 # optional
    - name: show Go version # verify that go is installed
      run: go version # show go version

    - name: Checkout our codes #bring repo code to virtual environment
      uses: actions/checkout@v2
      
    - name: Check file system #check virtual environment has my files
      run: |
        ls
        cat calc.go # prints the contents of calc.go
        
    - name: Checkout private repo remotely
      uses: actions/checkout@v2
      with:
        repository: lowkh2/GoSchoolRemoteExample # the hidden repo i am trying to access
        path: virtualRepoFolder # Folder to save to in my virtual env
        token: ${{ secrets.GO_SECRET }} #pass to enter remote hidden repo
        
    - name: Show hidden files
      run: |
        cd virtualRepoFolder # to access the folder of interest in my virtual env
        ls
        cat myText.txt # show content of file of interest
        cd ..
        
    - name: Install dependencies for GO
      run: |
        go mod init GoCICDDemo
        go get github.com/franela/goblin # Adds package for Goblin testing
        go get github.com/tebeka/go2xunit # Adds package for conversion
        go mod tidy
        go test -v # Command to run go test
        go test -v | go2xunit > report.xml # run test again and output as report.xml
        ls # verify that the report is indeed created
    
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1 # Checkout Unit Test Reporting action
      if: always() # always do it
      with:
        files: report.xml #make use of a file we created
    - if: ${{ success() }}
      name: Create Upload Directory
      run: mkdir upload
      
    - name: Prepare Documents
      run: mv report.xml ./upload
      
    - name: Prepare artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: assetDocuments
        path: upload
        
    - name: Download Content
      uses: actions/download-artifact@v2
      with:
        name: assetDocuments
    - if: ${{ success() }}
      name: Discord Notifier
      uses: fateyan/action-discord-notifier@v1.2.0
      with:
        webhook: https://discord.com/api/webhooks/853518392798347264/LBg3xSNhVYRPow2uEjYK3mmuOy7ZBgnanZB_9OM3yXKRzTiUhUWDLMN9ynFsqtuhifW1
        message-title: CI Success by ${{github.actor}}
       
    - if: ${{ failure() }}
      name: Create Issues Notifications
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Build Failed # Just a name
        token: ${{secrets.GITHUB_TOKEN}} #reserved for GITHUB token
        assignees: ${{github.actor}} # person who did the checking in
        labels: workflow-failed # label
        body: Workflow failed for commit ${{github.sha}} # body or content, github.sha is just a hash number
    - if: ${{ failure() }}    
      name: Discord Notifier
      uses: fateyan/action-discord-notifier@v1.2.0
      with:
        webhook: https://discord.com/api/webhooks/853518392798347264/LBg3xSNhVYRPow2uEjYK3mmuOy7ZBgnanZB_9OM3yXKRzTiUhUWDLMN9ynFsqtuhifW1
        message-title: CI Failed by ${{github.actor}}
